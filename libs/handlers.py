import os
import shutil
import asyncio
import requests
import random
import datetime
import subprocess
import traceback
import sys
import string
from ast import literal_eval

from zoneinfo import ZoneInfo

from app import dp, bot, query, week, time_table, escape_markdown, timetableBtn
from config import MYSQL_HOST

from aiogram import Bot, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor, exceptions


work_path = os.path.abspath(os.curdir)

class HMW:
    def __init__(self) -> None:
        self.wait_load_tasks = {}
hmw = HMW()


teacher = """<b>–£—á–∏—Ç–µ–ª—è:</b>
<blockquote>–î–∏–∫–∞–ª–µ–Ω–∫–æ –ò–≥–æ—Ä—å –ê–Ω–¥—Ä–µ–µ–≤–∏—á - –ë–û–°–°
–ì–∞–ø–æ–Ω–æ–≤ –ê–Ω–¥—Ä–µ–π –ò–≤–∞–Ω–æ–≤–∏—á - –í—ã—à–º–∞—Ç
–ï—Ä–º–æ–ª–µ–Ω–∫–æ –†–æ—Å—Ç–∏—Å–ª–∞–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á - –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
–ò–≤–∞–Ω–æ–≤ –ê–ª–µ–∫—Å–µ–π –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á - –î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞
–ö–∏—Ç–∞–µ–≤ –ê—Ä—Ç—É—Ä –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á - –ü–ú.04 
–ö–æ–≤–∞–ª—ë–≤–∞ –ù–∞–¥–µ–∂–¥–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞ - –ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
–ö–æ–≥—É—Ç –í–∏–∫—Ç–æ—Ä –ò–≥–æ—Ä–µ–≤–∏—á - –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏
–ö–æ–∑–ª–æ–≤ –Æ—Ä–∏–π –í–∞—Å–∏–ª—å–µ–≤–∏—á - –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞
–õ—è–ª–µ—á–∫–∏–Ω–∞ –ó–∏–Ω–∞–∏–¥–∞ –ü–∞–≤–ª–æ–≤–Ω–∞ - –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è
–ú–µ–ª—å–Ω–∏–∫ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ì–µ–Ω–Ω–∞–¥—å–µ–≤–∏—á - –ú–î–ö 04.01, –ú–î–ö 04.02
–û–ø–∞—Ü–∫–∞—è –ê–ª–ª–∞ –ò–≤–∞–Ω–æ–≤–Ω–∞ - –ò—Å—Ç–æ—Ä–∏—è
–¢–æ–º–∞–ª–∞–∫ –ú–∞—Ä–∏–Ω–∞ –ì—Ä–∏–≥–æ—Ä—å–µ–≤–Ω–∞ - –§–∏–∑–∏–∫–∞
–ß–µ—Ä–Ω—ã—à–µ–Ω–∫–æ –ù–∞–¥–µ–∂–¥–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞ - –î–µ–ª–æ–≤–æ–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –§–∏–ª–æ—Å–æ—Ñ–∏–∏
</blockquote>
"""

student = """<b>–°—Ç—É–¥–µ–Ω—Ç—ã:</b>
<blockquote>1. –ë–æ–±—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª –ê–Ω–¥—Ä–µ–µ–≤–∏—á
2. –ë–æ—Ä–æ–≤–∏–∫ –î–∞–Ω–∏–∏–ª
3. –ë—ã—Å—Ç—Ä–æ–≤ –í–∏–∫—Ç–æ—Ä
4. –í–µ—Ä–µ—â–∞–≥–∏–Ω –ê–Ω–¥—Ä–µ–π
5. –ì—Ä–æ–º–æ–≤ –î–º–∏—Ç—Ä–∏–π
6. –î—è—Ç–ª–æ–≤ –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω
7. –ñ–∏—Ç–µ–Ω–∫–æ –ê—Ä—Ç–µ–º –õ–µ–æ–Ω–∏–¥–æ–≤–∏—á
8. –ó–∞—É—Å–∞–µ–≤ –ò–ª—å—è
9. –ö–ª–µ–ø–∏–∫–æ–≤ –ú–∏—Ö–∞–∏–ª
10. –ö–æ–≤–∞–ª—å—á—É–∫ –î–µ–Ω–∏—Å
11. –ö–æ—Ä–æ–ª—å –¢–∏–º–æ—Ñ–µ–π
12. –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –í–∏–æ–ª–µ—Ç—Ç–∞
13. –ú–æ–∫–µ–µ–≤ –ê–ª–µ–∫—Å–µ–π
14. –ù–æ–≤–∏–∫–æ–≤ –ê–Ω–¥—Ä–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
15. –û–ª—å—à–∞–Ω—Å–∫–∞—è –î–æ–º–µ–Ω–∏–∫–∞
16. –ü–µ—Å—Ç—Ä—è–∫–æ–≤ –ú–∞–∫—Å–∏–º –ì–µ–µ–≤–∏—á
17. –†–∞–µ–Ω–∫–æ –ê–Ω–¥—Ä–µ–π
18. –†—É–ª–µ–≤ –°—Ç–µ–ø–∞–Ω –°–µ—Ä–≥–µ–µ–≤–∏—á
19. –°–∞–π–¥–∞–º–µ—Ç–æ–≤ –¢–∏–º—É—Ä
20. –°–º–µ–ª–æ–≤ –ê–Ω—Ç–æ–Ω
21. –°—Ç–∞—Ä–æ–≤–æ–π—Ç–æ–≤ –û–ª–µ–≥
22. –¢—Ä—É—Ö–∞—á–µ–≤ –ê—Ä—Ç–µ–º –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
23. –¢—É—Ä–∞–Ω—Å–∫–∏–π –î–∞–Ω–∏–∏–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á
24. –®–∏–ª–æ–≤–∞ –ï–≤–≥–µ–Ω–∏—è
</blockquote>
"""

moms = """<b>–ú–∞–º—ã:</b>
<blockquote>–ë–æ–±—Ä–æ–≤ –ú–∏—Ö–∞–∏–ª
–ë–æ–±—Ä–æ–≤–∞ –ò—Ä–∏–Ω–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞
–ë–æ—Ä–æ–≤–∏–∫ –õ—é–¥–º–∏–ª–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
–ë—ã—Å—Ç—Ä–æ–≤–∞ –Ø–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
–í–µ—Ä–µ—â–∞–≥–∏–Ω–∞ –õ—é–¥–º–∏–ª–∞ –ê–Ω–∞—Ç–æ–ª—å–µ–≤–Ω–∞
–ê–∫–∏–º–æ–≤–∞(–ì—Ä–æ–º–æ–≤–∞) –ê–Ω–Ω–∞ –í–∞–ª–µ—Ä—å–µ–≤–Ω–∞
–î—è—Ç–ª–æ–≤–∞ –ú–∞—Ä–∏–Ω–∞ –ü–µ—Ç—Ä–æ–≤–Ω–∞
–ñ–∏—Ç–µ–Ω–∫–æ –û–∫—Å–∞–Ω–∞ –õ–µ–æ–Ω–∏–¥–æ–≤–Ω–∞
–ó–∞—É—Å–∞–µ–≤–∞ –ï–ª–µ–Ω–∞ –Æ—Ä—å–µ–≤–Ω–∞
–ö–ª–µ–ø–∏–∫–æ–≤–∞ –ù–∞—Ç–∞–ª—å—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞
–ö–æ–≤–∞–ª—å—á—É–∫ –ê–ª–ª–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
–ö–æ—Ä–æ–ª—å –°–µ—Ä–≥–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á üëé
–ö—É–∑–Ω–µ—Ü–æ–≤–∞ –û–∫—Å–∞–Ω–∞ –°—Ç–∞–Ω–∏—Å–ª–∞–≤–æ–≤–Ω–∞
–ú–æ–∫–µ–µ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞
–ù–æ–≤–∏–∫–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–Ω–¥—Ä–µ–µ–≤–∏—á üëé
–•–∞—Ä–∏—Ç–æ–Ω—Ü–µ–≤–∞(–û–ª—å—à–∞–Ω—Å–∫–∞—è) –ú–∞—Ä–∏–Ω–∞ –Æ—Ä—å–µ–≤–Ω–∞
–ü–µ—Å—Ç—Ä—è–∫–æ–≤–∞ –û–ª—å–≥–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞
–†–∞–µ–Ω–∫–æ –ì–∞–ª–∏–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–Ω–∞
–†—É–ª√´–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
–ì–æ–¥–∏–π(–°–∞–π–¥–∞–º–µ—Ç–æ–≤–∞) –ï–ª–µ–Ω–∞ –ì–µ–Ω—Ä–∏–∫–æ–≤–Ω–∞
–°–º–µ–ª–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞
–°—Ç–∞—Ä–æ–≤–æ–π—Ç–æ–≤–∞ –Æ–ª–∏—è –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞
–¢—Ä—É—Ö–∞—á–µ–≤–∞ –í–∏–∫—Ç–æ—Ä–∏—è –í–∏–∫—Ç–æ—Ä–æ–≤–Ω–∞
–¢—É—Ä–∞–Ω—Å–∫–∏–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á üëé
–®–∏–ª–æ–≤–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞
</blockquote>
"""


if requests.get('https://ip.beget.ru/').text.replace(' ', '').replace('\n', '') == MYSQL_HOST: # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /git –∏ /restar —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
    @dp.message_handler(commands=["git"])
    async def handler(message: types.message):
        if message['from']['id'] not in [780882761, 1058211493]: return

        git_message = await message.reply("ü™õ *–û–∂–∏–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...*", parse_mode="Markdown")

        pull_result = subprocess.Popen(["git", "pull", "https://github.com/opolonix/JournalBot"], stdout=subprocess.PIPE, text=True, stderr=subprocess.PIPE)
        output, errors = pull_result.communicate(input="Hello from the other side!")
        pull_result.wait()
        await bot.edit_message_text(f"ü™õ *–û–∂–∏–¥–∞–µ–º –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...\n–†–µ–∑—É–ª—å—Ç–∞—Ç:*\n`{output}`", git_message.chat.id, git_message.message_id, parse_mode="Markdown")
        if "Already up to date.\n" != output:
            await message.reply(f"*–í—ã—Ö–æ–¥!* _(‚è∞{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')})_", parse_mode="Markdown")
            try:
                dp.stop_polling()
                await dp.wait_closed()
                await bot.close()
            except: pass

            os.system(f"python {work_path}/app.py &")
            sys.exit(0)
        else: await message.reply(f"*–§–∞–π–ª—ã –Ω–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è!*", parse_mode="Markdown")
    @dp.message_handler(commands=["restart"])
    async def handler(message: types.message):
        if message['from']['id'] not in [780882761, 1058211493]: return

        await message.reply("ü™õ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")

        dp.stop_polling()
        await dp.wait_closed()
        await bot.close()


        os.system(f"python {work_path}/app.py &")
        sys.exit(0)

@dp.message_handler(commands=["exit"])
async def handler(message: types.message):
    if message['from']['id'] not in [780882761, 1058211493]: return
    await message.reply(f"*–í—ã—Ö–æ–¥!* _(‚è∞{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')})_", parse_mode="Markdown")
    exit(0)

@dp.message_handler(commands=["start"])
async def handler(message: types.message):
    await message.reply("**–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏ –¥–æ–º–∞—à–∫–∏!!**", parse_mode = "Markdown", reply_markup=timetableBtn)

@dp.message_handler(commands=["export", "exp"])
async def handler(message: types.message):
    """
        –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /export <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>
        –ü—Ä–æ—Å—Ç–æ /export —Å–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –≤—Å–µ–≥–æ –±–æ—Ç–∞
    """
    if message['from']['id'] not in [780882761, 1058211493]: return
    message.text = message.text.split(" ")
    message.text.pop(0)
    message.text = ' '.join(message.text).replace("\\", "/").replace(" ", "")
    if message.text == '' or message.text == '/':
        print(message)
        await bot.send_document(message.chat.id,  InputFile(shutil.make_archive("files", 'zip', work_path), filename='BioAttacker.zip'))
        os.remove(work_path + "/files.zip")
    else:
        if not message.text.startswith('/'): message.text = "/" + message.text
        if os.path.exists(work_path + message.text):
            if not os.path.isfile(work_path + message.text):
                await bot.send_document(message.chat.id,  InputFile(shutil.make_archive("files", 'zip', work_path + message.text),  filename=message.text + ".zip"))
                os.remove(work_path + "/files.zip")
            else:
                await bot.send_document(message.chat.id,  InputFile(work_path + message.text, filename=message.text))
        else: await message.reply(f"ü™õ –ü—É—Ç—å `{message.text}` –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.message_handler(content_types=['text']) 
async def handler(message: types.message):
    if message.text.lower() in ["—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "—Ä", "/timetable@msg_72997_bot", "/timetable"]:
        date = datetime.datetime.now()
        result, date = time_table(date, next=True)

        next_date = date + datetime.timedelta(days=1)
        pre_date = date - datetime.timedelta(days=1)

        tasks = 0
        for i in query("SELECT * FROM `events` WHERE `type` LIKE 'home' ORDER BY `events`.`id` ASC"):
           
            data = literal_eval(i['data'])
            print(data['date'], date.strftime('%d.%m.%Y'), data['date'] == date.strftime('%d.%m.%Y'))
            if data['date'] == date.strftime('%d.%m.%Y'): tasks += 1

        inline_add = InlineKeyboardMarkup(row_width=3).add(
            InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data=f"edit|{pre_date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–æ–±–Ω', callback_data=f"edit|{date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–≤–ø–µ—Ä–µ–¥', callback_data=f"edit|{next_date.strftime('%d.%m.%Y')}|n"),
            InlineKeyboardButton(f"–¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞{' ‚ñ´Ô∏è' if tasks != 0 else ''}", callback_data=f"home|{date.strftime('%d.%m.%Y')}"),
        )
        await message.reply(result, parse_mode = "Markdown", reply_markup=inline_add)

    if message.text.lower().startswith("—É—á–µ–Ω–∏–∫–∏"):
        inline_add = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton('—Å–∫—Ä—ã—Ç—å', callback_data=f"del")
        )
        await message.reply(student, parse_mode = "HTML", reply_markup=inline_add)

    if message.text.lower().startswith("—É—á–∏—Ç–µ–ª—è"):
        inline_add = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton('—Å–∫—Ä—ã—Ç—å', callback_data=f"del")
        )
        await message.reply(teacher, parse_mode = "HTML", reply_markup=inline_add)
        
    if message.text.lower().startswith("–º–∞–º—ã"):
        inline_add = InlineKeyboardMarkup(row_width=1).add(
            InlineKeyboardButton('—Å–∫—Ä—ã—Ç—å', callback_data=f"del")
        )
        await message.reply(moms, parse_mode = "HTML", reply_markup=inline_add)

    if message.text.lower().startswith("+–ø–∞—Ä–∞ "):
        text = message.text[6::]
        data = {}
        for i in text.split("&"):
            split_item = i.strip().split(' ')
            data[split_item[0]] = ' '.join(split_item[1:])

        await message.reply(escape_markdown(text), parse_mode = "Markdown")
    elif message.text.startswith("+") and not message.text.startswith("+ "):
        text = message.text[2::].lower()
        text = message.text[1].upper() + text

        syns = {
            "–ü–†–ê–ö–¢–ò–ö–ê":                             ["–ø—Ä–∞–∫—Ç–∏–∫–∞"],
            "–ú–î–ö":                                  ["–º–¥–∫"],
            "–ö–ª–∞—Å—Å–Ω—ã–π —á–∞—Å":                         ["–∫–ª–∞—Å—Å–Ω—ã–π —á–∞—Å"],
            "–≠–ª–µ–º–µ–Ω—Ç—ã –≤—ã—Å—à–µ–π –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏":           ["–≤—ã—à–º–∞—Ç", "–≤—ã—Å—à–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞"],
            "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏":                    ["–∫—Å", "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ —Å–µ—Ç–∏"],
            "–î–µ–ª–æ–≤–æ–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –∫—É–ª—å—Ç—É—Ä–∞ —Ä–µ—á–∏": ["–∫—É–ª—å—Ç—É—Ä–∞ —Ä–µ—á–∏", "–¥–µ–ª–æ–≤–æ–π —Ä—É—Å—Å–∫–∏–π –∏ –∫—É–ª—å—Ç—É—Ä–∞ —Ä–µ—á–∏"],
            "–î–µ–ª–æ–≤–æ–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫":                 ["–¥–µ–ª–æ–≤–æ–π —Ä—É—Å—Å–∫–∏–π"],
            "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π":                           ["–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"],
            "–§–∏–∑–∏–∫–∞":                               ["—Ñ–∏–∑–∏–∫–∞"],
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤":       ["–∞–ø–ø. —Å—Ä–µ–¥—Å—Ç–≤–∞", "–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–ø–ø–∞—Ä–∞—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤", "–∞–ø–ø —Å—Ä–µ–¥—Å—Ç–≤–∞"],
            "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞":                          ["—Ñ–∏–∑—Ä–∞", "—Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–∞", "—Ñ–∏–∑ —Ä–∞"],
            "–ò—Å—Ç–æ—Ä–∏—è":                              ["–∏—Å—Ç–æ—Ä–∏—è"],
            "–î–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞":                ["–¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–¥–∏—Å–∫—Ä–µ—Ç"]
        }

        day = None

        if message.reply_to_message and message.reply_to_message.from_user.id in [6636195294, 5438548972]:
            day = message.reply_to_message.reply_markup.inline_keyboard[1][0]['callback_data'].split("|")[1]

        task = None

        subj = text.split(' ')[0] if len(text.split(' ')) != 1 else None
        task = ' '.join(text.split(' ')[1::]) if len(text.split(' ')) != 1 else None
        is_syn = False
        for i in syns:
            for j in syns[i]:
                if text.lower().startswith(j + " "):
                    task = text[len(j + " ")::]
                    subj = i
                    is_syn = True
                    break
        
        

        if subj != None and day != None and task != None:
            key = ''.join(random.choice(string.ascii_lowercase) for i in range(6))
            inline_hmw = InlineKeyboardMarkup(row_width=3).add(
                InlineKeyboardButton('–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∑', callback_data=f"add_home|{key}"),
                InlineKeyboardButton('–û—Ç–º–µ–Ω–∞', callback_data=f"remove_home|{key}")
            )
            tasks = []
            for i in query("SELECT * FROM `events` WHERE `type` LIKE 'home' ORDER BY `events`.`id` ASC"):
                data = literal_eval(i['data'])
                if data['date'] == day and data['subj_name'].lower() == subj.lower():
                    tasks.append(data['task'])

            text_tasks = '\n'.join(tasks)
            new_task = ""
            for i in task.split("\n"):
                new_task += f"\n+>{i}"

            hmw.wait_load_tasks[key] = {
                "task": task,
                "subj": subj,
                "date": day
            }

            if is_syn or text_tasks != "": result = f"–•–æ—Ç–∏—Ç–µ _–¥–æ–±–∞–≤–∏—Ç—å –¥–∑_ –ø–æ –ø—Ä–µ–¥–º–µ–Ω—Ç—É *{subj.lower()}* –Ω–∞ _{day}_?\n\n–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{text_tasks}{new_task}"
            else: result = f"–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏–Ω–æ–Ω–∏–º–∞—Ö, —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ–¥–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∑ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ *{subj.lower()}* –Ω–∞ _{day}_?\n\n–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{text_tasks}{new_task}"
            await message.reply(result, parse_mode = "Markdown", reply_markup=inline_hmw)
        


@dp.callback_query_handler()
async def callback_query(call: types.CallbackQuery):
    
    if call.data.split("|")[0] == "add_home":
        if call.data.split("|")[1] in hmw.wait_load_tasks:
            data = hmw.wait_load_tasks[call.data.split("|")[1]]
            task_data = f'{{"date": "{data["date"]}", "task": "{data["task"]}", "subj_name": "{data["subj"]}"}}'.replace('"', '\\"').replace("'", "\\'").replace("\n", "&%&")

            query(f"INSERT INTO `events` (`id`, `type`, `date_from`, `date_until`, `data`) VALUES (NULL, 'home', NULL, NULL, '{task_data}')")
            await call.answer("–î–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            inline_add = InlineKeyboardMarkup()
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–î–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", parse_mode = "Markdown", reply_markup=inline_add)
        else: await call.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞!")
    if call.data.split("|")[0] == "remove_home":
        try: 
            del hmw.wait_load_tasks[call.data.split("|")[1]]
            await call.answer("–î–∑ —É–¥–∞–ª–µ–Ω–æ!")
        except: await call.answer("–ö–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞!")
        inline_add = InlineKeyboardMarkup()
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=call.message.text, parse_mode = "Markdown", reply_markup=inline_add)
    if call.data.split("|")[0] == "edit":

        date = datetime.datetime.strptime(call.data.split("|")[1], '%d.%m.%Y')
        result, date = time_table(date, next=len(call.data.split("|")) == 3 and call.data.split("|")[2] == 'n')

        next_date = date + datetime.timedelta(days=1)
        pre_date = date - datetime.timedelta(days=1)

        tasks = 0
        for i in query("SELECT * FROM `events` WHERE `type` LIKE 'home' ORDER BY `events`.`id` ASC"):

            data = literal_eval(i['data'])
            if data['date'] == date.strftime('%d.%m.%Y'): tasks += 1

        inline_add = InlineKeyboardMarkup(row_width=3).add(
            InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data=f"edit|{pre_date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–æ–±–Ω', callback_data=f"edit|{date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–≤–ø–µ—Ä–µ–¥', callback_data=f"edit|{next_date.strftime('%d.%m.%Y')}|n"),
            InlineKeyboardButton(f"–¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞{' ‚ñ´Ô∏è' if tasks != 0 else ''}", callback_data=f"home|{date.strftime('%d.%m.%Y')}"),
        )
        try: await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result, parse_mode = "Markdown", reply_markup=inline_add)
        except exceptions.MessageNotModified: await call.answer()
    if call.data.split("|")[0] == "home":
        date = datetime.datetime.strptime(call.data.split("|")[1], '%d.%m.%Y')
        tasks = {}
        for i in query("SELECT * FROM `events` WHERE `type` LIKE 'home' ORDER BY `events`.`id` ASC"):
            data = literal_eval(i['data'])
            if data['date'] == call.data.split("|")[1]:
                if data['subj_name'].lower() in tasks: tasks[data['subj_name'].lower()] += '\n' + data['task'].replace("&%&", "\n")
                else: tasks[data['subj_name'].lower()] = data['task'].replace("&%&", "\n")
        result = f"–î–∑ –Ω–∞ {call.data.split('|')[1]}"
        for i in tasks:
            result += f"\n *{i[0].upper() + i.lower()[1::]}*\n"
            result += tasks[i]
        if len(tasks) != 0:
            await call.answer()
            await call.message.reply(result, parse_mode = "Markdown")
        else:
            await call.answer("–î–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if call.data == "del":
        await call.message.delete()