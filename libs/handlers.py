import os
import shutil
import asyncio
import requests
import random
import datetime

from app import dp, bot, query, week, time_table, escape_markdown
from config import MYSQL_HOST

from aiogram import Bot, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor, exceptions


work_path = os.path.abspath(os.curdir)

if requests.get('https://ip.beget.ru/').text.replace(' ', '').replace('\n', '') == MYSQL_HOST: # –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /git –∏ /restar —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ
    @dp.message_handler(commands=["git"])
    async def handler(message: types.message):
        if message['from']['id'] not in [780882761, 1058211493]: return

        os.system("git pull https://github.com/opolonix/JournalBot")
        await message.reply("ü™õ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        await message.reply("ü™õ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")

        dp.stop_polling()
        await dp.wait_closed()
        await bot.close()


        os.system(f"python {work_path}/app.py &")
        exit()

    @dp.message_handler(commands=["restart"])
    async def handler(message: types.message):
        if message['from']['id'] not in [780882761, 1058211493]: return

        await message.reply("ü™õ –†–µ—Å—Ç–∞—Ä—Ç –±–æ—Ç–∞")

        dp.stop_polling()
        await dp.wait_closed()
        await bot.close()


        os.system(f"python {work_path}/app.py &")
        exit()

@dp.message_handler(commands=["exit"])
async def handler(message: types.message):
    if message['from']['id'] not in [780882761, 1058211493]: return
    await message.reply(f"*–í—ã—Ö–æ–¥!* _(‚è∞{datetime.datetime.now().strftime('%d.%m.%Y %H:%M:%S')})_", parse_mode="Markdown")
    exit()

@dp.message_handler(commands=["export", "exp"])
async def handler(message: types.message):
    """
        –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤ –∏–∑ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ /export <–ø—É—Ç—å –∫ —Ñ–∞–π–ª—É>
        –ü—Ä–æ—Å—Ç–æ /export —Å–æ–∑–¥–∞–µ—Ç –∞—Ä—Ö–∏–≤ –≤—Å–µ–≥–æ –±–æ—Ç–∞
    """
    if message['from']['id'] not in [780882761, 1058211493]: return
    message.text = message.text.split(" ")
    message.text.pop(0)
    message.text = ' '.join(message.text).replace("\\", "/").replace(" ", "")
    if message.text == '' or message.text == '/':
        print(message)
        await bot.send_document(message.chat.id,  InputFile(shutil.make_archive("files", 'zip', work_path), filename='BioAttacker.zip'))
        os.remove(work_path + "/files.zip")
    else:
        if not message.text.startswith('/'): message.text = "/" + message.text
        if os.path.exists(work_path + message.text):
            if not os.path.isfile(work_path + message.text):
                await bot.send_document(message.chat.id,  InputFile(shutil.make_archive("files", 'zip', work_path + message.text),  filename=message.text + ".zip"))
                os.remove(work_path + "/files.zip")
            else:
                await bot.send_document(message.chat.id,  InputFile(work_path + message.text, filename=message.text))
        else: await message.reply(f"ü™õ –ü—É—Ç—å `{message.text}` –Ω–µ –Ω–∞–π–¥–µ–Ω")


@dp.message_handler(content_types=['text']) 
async def handler(message: types.message):
    if message.text.lower() == "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        date = datetime.date.today()
        result = time_table(datetime.datetime.today())

        next_date = date + datetime.timedelta(days=1)
        pre_date = date - datetime.timedelta(days=1)

        inline_add = InlineKeyboardMarkup(row_width=3).add(
            InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data=f"edit|{pre_date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–æ–±–Ω', callback_data=f"edit|{date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–≤–ø–µ—Ä–µ–¥', callback_data=f"edit|{next_date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞', callback_data=f"home|{date.strftime('%d.%m.%Y')}"),
        )
        await message.reply(result, parse_mode = "Markdown", reply_markup=inline_add)

    if message.text.lower().startswith("+–ø–∞—Ä–∞ "):
        text = message.text[6::]
        data = {}
        for i in text.split("&"):
            split_item = i.strip().split(' ')
            data[split_item[0]] = ' '.join(split_item[1:])

        print(data)

        await message.reply(escape_markdown(text), parse_mode = "Markdown")

@dp.callback_query_handler()
async def callback_query(call: types.CallbackQuery):
    if call.data.split("|")[0] == "edit":

        date = datetime.datetime.strptime(call.data.split("|")[1], '%d.%m.%Y')
        result = time_table(date)

        next_date = date + datetime.timedelta(days=1)
        pre_date = date - datetime.timedelta(days=1)

        inline_add = InlineKeyboardMarkup(row_width=3).add(
            InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data=f"edit|{pre_date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–æ–±–Ω', callback_data=f"edit|{date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–≤–ø–µ—Ä–µ–¥', callback_data=f"edit|{next_date.strftime('%d.%m.%Y')}"),
            InlineKeyboardButton('–¥–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞', callback_data=f"home|{date.strftime('%d.%m.%Y')}"),
        )
        try:
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=result, parse_mode = "Markdown", reply_markup=inline_add)
        except exceptions.MessageNotModified: await call.answer()
    if call.data.split("|")[0] == "home":
        await call.answer()
